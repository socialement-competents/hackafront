import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  Users: GQLUser[];
  UserById: GQLUser;
}

export interface GQLUser {
  email: string;
  firstname?: string;
  lastname?: string;
  bio?: string;
  image?: string;
  cards?: string[];
}

export interface GQLMutation {
  Register: GQLUser;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  Users?: QueryToUsersResolver<TParent>;
  UserById?: QueryToUserByIdResolver<TParent>;
}

export interface QueryToUsersArgs {
  limit?: number;
}
export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserByIdArgs {
  id: string;
}
export interface QueryToUserByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  email?: UserToEmailResolver<TParent>;
  firstname?: UserToFirstnameResolver<TParent>;
  lastname?: UserToLastnameResolver<TParent>;
  bio?: UserToBioResolver<TParent>;
  image?: UserToImageResolver<TParent>;
  cards?: UserToCardsResolver<TParent>;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToBioResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCardsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  Register?: MutationToRegisterResolver<TParent>;
}

export interface MutationToRegisterArgs {
  username: string;
  password: string;
}
export interface MutationToRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}
